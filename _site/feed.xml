<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-04-29T22:56:55+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">쉽게 정리한 블로그</title><subtitle></subtitle><author><name>Byeong hwi</name></author><entry><title type="html">깃허브 블로그 커스텀하기 - 테마 설정, 기본적인 설정 등</title><link href="http://localhost:4000/custom%20blog/Custom_GitBlog1/" rel="alternate" type="text/html" title="깃허브 블로그 커스텀하기 - 테마 설정, 기본적인 설정 등" /><published>2023-04-28T00:00:00+09:00</published><updated>2023-04-28T00:00:00+09:00</updated><id>http://localhost:4000/custom%20blog/Custom_GitBlog1</id><content type="html" xml:base="http://localhost:4000/custom%20blog/Custom_GitBlog1/"><![CDATA[<p><br /></p>

<div align="center">


❗️커스텀 포스팅은 필자의 시행착오와 독학을 통해 작성되었습니다.❗️<br /> 틀린 부분이나 좀 더 쉬운 방법이 있다면 댓글 부탁드려요. 다양한 피드백 환영입니다😃


</div>

<p><br /><br /></p>

<h1 id="1️⃣-_configyml-파일-파헤치기">1️⃣ _config.yml 파일 파헤치기</h1>
<ul>
  <li>가장 기본적인 설정을 하는 파일이에요.</li>
  <li>파일의 위치는 <strong>블로그 폴더의 루트 폴더</strong>입니다.</li>
</ul>

<h2 id="site-setting-부분">Site setting 부분</h2>
<ul>
  <li>따로 주석을 달아놓을게요, 제 블로그와 비교해보세요!</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Site Settings</span>
locale                   : <span class="s2">"ko-KR"</span> <span class="c"># 블로그의 기본 언어를 설정합니다. ex)영어: en-US</span>
title                    : <span class="s2">"쉽게 정리한 블로그"</span> <span class="c"># 사이트 탭에 나타나는 블로그 이름입니다.</span>
title_separator          : <span class="s2">"-"</span>
subtitle                 : <span class="s2">"Let's do our best!"</span> <span class="c"># 블로그 제목 아래에 표시되는 부분입니다.</span>
name                     : <span class="s2">"Byeong hwi"</span> <span class="c"># 블로그 가장 하단 부분 @2023 {name} Powered by 부분</span>
description              : <span class="s2">""</span> <span class="c"># 어느 부분인지 모르겠네요</span>
url                      : <span class="s2">"https://0530hwi.github.io"</span> <span class="c"># 블로그의 주소를 나타냅니다. 여러분의 주소를 입력해주세요.</span>
baseurl                  : <span class="c"># 블로그 접속 오류가 발생(fallback)했을 때 연결되는 서브 주소입니다.</span>
repository               : <span class="s2">"0530hwi/0530hwi.github.io"</span> <span class="c"># 깃허브 저장소입니다. </span>
teaser                   : <span class="c"># fallback의 경우 연결되는 이미지입니다. 경로는  "/assets/images/.png" </span>
logo                     : <span class="s2">"/assets/images/notebook.png"</span> <span class="c"># 제목 옆에 있는 로고 이미지입니다. </span>
masthead_title           : <span class="s2">"쉽게 정리한 블로그: An easy notebook"</span> <span class="c"># 블로그 제목을 나타냅니다. 로고 옆에 있는 제목이에요</span>
</code></pre></div></div>
<p>✅ <strong>참고</strong>: 이미지 경로는 <code class="language-plaintext highlighter-rouge">/assets/</code>폴더를 활용해야 합니다. <code class="language-plaintext highlighter-rouge">images</code> 폴더가 없이 그대로 사용하셔도 무방합니다.<br />
사진 파일은 png, jpg, jpeg 등 모두 상관없습니다.</p>

<h2 id="site-author">Site Author</h2>

<ul>
  <li>이 부분은 블로그 왼쪽 부분의 영역입니다.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Site Author</span>
author:
  name             : <span class="s2">"Byeong hwi"</span> <span class="c"># 블로그 왼쪽에 나타나는 이름입니다.</span>
  avatar           : <span class="s2">"/assets/images/bear.png"</span> <span class="c"># 이름 위 사진입니다. 경로는 /assets/images/.png로 설정 가능합니다.</span>
  bio              : <span class="s2">"어려운 내용, 쉽게 정리해보겠습니다 :)"</span> <span class="c"># 소개란입니다. </span>
  location         : <span class="s2">"Republic of Korea"</span> <span class="c"># 위치를 나타내줍니다. </span>
  email            :
  links:
    - label: <span class="s2">"Email"</span>
      icon: <span class="s2">"fas fa-fw fa-envelope-square"</span>
      url: mailto:0530hwi@gmail.com <span class="c">#mailto:를 입력해야 메일 쓰기로 바로 연결됩니다.</span>
    - label: <span class="s2">"Website"</span>
      icon: <span class="s2">"fas fa-fw fa-link"</span>
      <span class="c"># url: "https://your-website.com" # 이 부분을 주석처리하면 블로그에서 생략됩니다.</span>
    - label: <span class="s2">"Twitter"</span>
      icon: <span class="s2">"fab fa-fw fa-twitter-square"</span>
      <span class="c"># url: "https://twitter.com/" # 이 부분을 주석처리하면 블로그에서 생략됩니다.</span>
    - label: <span class="s2">"Facebook"</span>
      icon: <span class="s2">"fab fa-fw fa-facebook-square"</span>
      <span class="c"># url: "https://facebook.com/" # 이 부분을 주석처리하면 블로그에서 생략됩니다.</span>
    - label: <span class="s2">"GitHub"</span>
      icon: <span class="s2">"fab fa-fw fa-github"</span>
      url: <span class="s2">"https://github.com/0530hwi"</span>
    - label: <span class="s2">"Instagram"</span>
      icon: <span class="s2">"fab fa-fw fa-instagram"</span>
      url: <span class="s2">"https://instagram.com/hwiping_"</span>
</code></pre></div></div>

<h2 id="site-footer">Site Footer</h2>
<ul>
  <li>다음은 <code class="language-plaintext highlighter-rouge">Site Footer</code> 영역입니다.</li>
  <li>이 영역은 블로그 하단 부분에 해당됩니다.</li>
  <li>이 부분은 블로그 프로필(왼쪽 영역)과 동일한 부분이 많아서 저같은 경우 <strong>모두 주석 처리</strong>했습니다.</li>
</ul>

<p><img width="425" alt="스크린샷 2023-04-28 오후 6 36 28" src="https://user-images.githubusercontent.com/86516594/235113455-312006d5-09a1-47c3-ad90-53eb48d49f26.png" class="align-center" /></p>

<ul>
  <li>개인적으로 저는 빨간 영역의 부분을 지우고 싶더라구요! <br /> 저와 같이 하시려면 다음을 참고해주세요!
    <h3 id="follow-feed-지우기">FOLLOW: FEED 지우기</h3>
    <ol>
      <li>먼저 폴더 <code class="language-plaintext highlighter-rouge">_includes</code>로 이동합니다.</li>
      <li><code class="language-plaintext highlighter-rouge">footer_html</code></li>
      <li>아래의 코드 부분을 <strong>제외한 나머지 부분을 모두 주석 처리</strong>
<img width="610" alt="스크린샷 2023-04-28 오후 6 57 03" src="https://user-images.githubusercontent.com/86516594/235117681-bed715d0-6f85-48bc-9711-15431c86de61.png" class="align-center" /></li>
    </ol>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div <span class="nv">class</span><span class="o">=</span><span class="s2">"page__footer-copyright"</span><span class="o">&gt;</span>&amp;copy<span class="p">;</span> 2023 Byeong hwi. Powered by &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">"https://jekyllrb.com"</span> <span class="nv">rel</span><span class="o">=</span><span class="s2">"nofollow"</span><span class="o">&gt;</span>Jekyll&lt;/a&gt; &amp;amp<span class="p">;</span> &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">"https://mademistakes.com/work/minimal-mistakes-jekyll-theme/"</span> <span class="nv">rel</span><span class="o">=</span><span class="s2">"nofollow"</span><span class="o">&gt;</span>Minimal Mistakes&lt;/a&gt;.&lt;/div&gt;
</code></pre></div></div>

<p>✅ <strong>참고</strong>: html 블록 주석처리는 vscode에서 <code class="language-plaintext highlighter-rouge">shift + option + a</code> 간편하게 할 수 있습니다. <br /> 위의 코드는 Powered by ~ 부분입니다. 이 부분을 주석 처리하면 저작권 문제가 발생할 수 있습니다.</p>]]></content><author><name>Byeong hwi</name></author><category term="Custom Blog" /><category term="Blog" /><category term="Git" /><category term="Github" /><category term="Jekyll" /><category term="Brew" /><category term="Ruby" /><category term="rbenv" /><summary type="html"><![CDATA[깃허브 블로그 커스텀, 쉽게 정리했습니다. '_config_yml'파일 정복하기]]></summary></entry><entry><title type="html">초보를 위한 깃허브 블로그 만들기(4). vscode로 블로그 관리하기</title><link href="http://localhost:4000/making%20blog/Making_GitBlog4/" rel="alternate" type="text/html" title="초보를 위한 깃허브 블로그 만들기(4). vscode로 블로그 관리하기" /><published>2023-04-27T00:00:00+09:00</published><updated>2023-04-27T00:00:00+09:00</updated><id>http://localhost:4000/making%20blog/Making_GitBlog4</id><content type="html" xml:base="http://localhost:4000/making%20blog/Making_GitBlog4/"><![CDATA[<p><br /></p>

<p>❗️모든 설치 과정은 <strong>MacOS Ventura(M1 Mac)</strong> 환경에서 진행됩니다 ❗️</p>

<p><br /></p>

<p>안녕하세요! 깃허브 블로그는 잘 설치되었나요? <br />
이번에는 Visual Studio Code로 깃허브 블로그를 아주 간편하게 관리하는 방법을 공유합니다.<br /></p>

<h1 id="1️⃣-visual-studio-code-설치하기">1️⃣ Visual Studio Code 설치하기</h1>
<ol>
  <li>
    <p><a href="https://code.visualstudio.com/Download">Visual Sutdio Code Download Link</a>로 이동해 주세요!</p>
  </li>
  <li><strong>Mac</strong>을 선택해 주세요!
    <ul>
      <li>설치하는 과정에서 특별한 건 없습니다. 쭉쭉 넘어가 주세요!</li>
    </ul>
  </li>
  <li>설치가 완료되었다면 아래와 같은 화면이 뜹니다.
<img width="600" alt="스크린샷 2023-04-27 오후 6 00 49" src="https://user-images.githubusercontent.com/86516594/234813734-fad5187e-4266-4f8b-a3a8-d4cba8f680e6.png" class="align-center" /></li>
</ol>

<h2 id="한국어-패키지-설정하기">한국어 패키지 설정하기</h2>
<ul>
  <li>저는 한국어 패키지가 설치가 되어있습니다. 영어 버전을 원하시는 분들은 건너뛰셔도 돼요!
<img width="600" alt="스크린샷 2023-04-27 오후 6 05 54" src="https://user-images.githubusercontent.com/86516594/234815186-0a20346b-fe28-4787-bdd1-e83e61bc9d17.png" class="align-center" /></li>
</ul>

<ol>
  <li>왼쪽 <strong>확장(Shift + Command + X)</strong>을 눌러 줍니다.</li>
  <li><strong>Korean Language Pack</strong>을 검색 후 설치해 줍니다.</li>
</ol>

<p><br /><br /></p>

<h1 id="2️⃣-github와-vscode-연결하기">2️⃣ Github와 VScode 연결하기</h1>

<ol>
  <li>
    <p>VScode를 실행합니다.</p>
  </li>
  <li>
    <p><strong>열기</strong>를 눌러 줍니다.
<img width="400" alt="스크린샷 2023-04-27 오후 6 56 25" src="https://user-images.githubusercontent.com/86516594/234828505-d2464273-629d-4133-8309-e3a9fd814355.png" class="align-center" /></p>
  </li>
  <li>
    <p>전에 만들어 두었던 깃허브 폴더를 선택해 주세요!
<img width="400" alt="스크린샷 2023-04-27 오후 6 58 18" src="https://user-images.githubusercontent.com/86516594/234828987-a6b4e271-0447-46cb-8a04-754ce14dfc25.png" class="align-center" /></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">control + shift + ₩</code>를 눌러 터미널을 열어 주세요!
<img width="400" alt="스크린샷 2023-04-27 오후 6 27 56" src="https://user-images.githubusercontent.com/86516594/234829475-0ecdb1ee-b8a8-426d-b436-37866c5558a2.png" class="align-center" /></p>
  </li>
  <li>github에 push가 잘 되는지 확인해 볼까요?
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> git add <span class="k">*</span>
 git commit <span class="nt">-m</span> <span class="s2">"Update Blog"</span> <span class="c">#원하는 커밋 메세지 작성</span>
 git push origin main
</code></pre></div>    </div>
    <ul>
      <li>❗️이 과정에서 계정과 비밀번호가 필요할 수 있습니다. 비밀번호에는 반드시 <strong>토큰</strong>을 입력해 주셔야 합니다. <br />
<a href="https://0530hwi.github.io/making%20blog/Making_GitBlog3/#%EF%B8%8F중요%EF%B8%8F-비밀번호에-토큰을-입력해야-해요">토큰 발급 바로가기</a></li>
    </ul>
  </li>
  <li>이제 vscode 터미널로도 로컬 서버를 열 수 있습니다!<br />
<code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code>를 vscode 터미널에 입력 후, 여러분의 멋진 블로그를 확인해 보세요!</li>
</ol>

<hr />
<p>✅ <strong>참고</strong>:<br /> 저는 127.0.0.1:4000 이라는 주소로 로컬 서버를 들어갈 수 있는데요. <br />이 서버는 깃에 푸시하기 전에 최종적으로 검토해보는 단계입니다. <br />따라서, <strong>여러분의 변경사항을 로컬 서버를 통해 먼저 확인할 수 있는 장점</strong>이 있습니다. <br />
또 깃에 업로드 후 블로그가 업데이트 되는 딜레이 시간(약 3분)이 있습니다. <br />로컬 서버를 이용하면 이러한 딜레이를 상쇄할 수 있기 때문에 로컬 서버를 이용하는 것이 블로그 작업에 매우 효율적입니다.</p>

<hr />

<h2 id="️주의-계정-일치-확인하기">❗️주의: 계정 일치 확인하기</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">git remote -v</code> 명령어를 통해 여러분의 계정과 일치하는지 확인해 주세요!</li>
  <li>만약 일치하지 않는다면 다음 과정을 진행하면 됩니다.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  git remote add origin <span class="o">(</span>저장소 주소<span class="o">)</span> <span class="c">#깃허브 블로그 저장소</span>
  git remote <span class="nt">-v</span>
</code></pre></div>    </div>
  </li>
</ul>

<h1 id="지금까지의-과정-총정리">지금까지의 과정 총정리</h1>
<ol>
  <li>Mac에서 여러가지 패키지를 편하게 관리하기 위해 <code class="language-plaintext highlighter-rouge">Homebrew</code>를 설치했다</li>
  <li><code class="language-plaintext highlighter-rouge">ruby</code>를 독립적으로 이용하기 위해 <code class="language-plaintext highlighter-rouge">rbenv</code>패키지를 설치했다</li>
  <li>로컬에서 깃허브 레파지토리를 관리하기 위해 <code class="language-plaintext highlighter-rouge">git</code>을 설치했다</li>
  <li>루비 개발 환경을 갖추기 위해 <code class="language-plaintext highlighter-rouge">gem install jekyll bundler</code>를 통해 설치했다.</li>
  <li>서버를 구동하기 위해 <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code>를 입력했다. <br /></li>
</ol>

<p><strong>🎉이상으로 깃허브 블로그 만들기 과정을 종료합니다! 깃허브 블로그 커스텀에서 뵙겠습니다!</strong></p>]]></content><author><name>Byeong hwi</name></author><category term="Making Blog" /><category term="Blog" /><category term="Git" /><category term="Github" /><category term="Jekyll" /><category term="Brew" /><category term="Ruby" /><category term="rbenv" /><summary type="html"><![CDATA[깃허브 블로그 관리하는 방법을 쉽게 정리했습니다]]></summary></entry><entry><title type="html">초보를 위한 깃허브 블로그 만들기(2). rbenv 패키지 설치</title><link href="http://localhost:4000/making%20blog/Making_GitBlog2/" rel="alternate" type="text/html" title="초보를 위한 깃허브 블로그 만들기(2). rbenv 패키지 설치" /><published>2023-04-25T00:00:00+09:00</published><updated>2023-04-25T00:00:00+09:00</updated><id>http://localhost:4000/making%20blog/Making_GitBlog2</id><content type="html" xml:base="http://localhost:4000/making%20blog/Making_GitBlog2/"><![CDATA[<p><br /></p>

<p>❗️모든 설치과정은 <strong>MacOS Ventura(M1 Mac)</strong> 환경에서 진행됩니다 ❗️</p>

<p><br /></p>

<h1 id="rbenv-패키지-설치하기">rbenv 패키지 설치하기</h1>
<ul>
  <li>rbenv란?
    <ul>
      <li>MacOS는 기본적으로 <code class="language-plaintext highlighter-rouge">ruby</code>가 설치되어 있습니다. <br /> 따라서 <code class="language-plaintext highlighter-rouge">ruby</code>는 OS의 영향을 받고, 다양한 버전을 독립적으로 관리하기가 쉽지 않습니다.</li>
      <li>이럴 때 독립적으로 <code class="language-plaintext highlighter-rouge">ruby</code>의 버전 관리를 도와주는 것이 <code class="language-plaintext highlighter-rouge">rbenv</code>입니다.</li>
    </ul>
  </li>
</ul>

<h2 id="1️⃣-1단계">1️⃣ 1단계</h2>
<p>자, 그럼 rbenv 패키지를 설치해봅시다.</p>
<ul>
  <li><a href="https://formulae.brew.sh/formula/rbenv">rbenv 설치 바로가기</a> <br />
홈페이지에는 rbenv에 대한 정보가 담겨 있어요.<br />
홈페이지를 참고해서 설치해도 되고, 저를 따라오셔도 됩니다.</li>
</ul>

<p><strong>❗️못할 것 같다는 생각은 잊어버리고, 터미널을 켜줍니다!</strong>
그리고 다음 명령어들을 쭉 입력해주세요</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>rbenv ruby-build 
rbenv verions <span class="c"># 설치가 완료되면 버전을 확인해보기</span>
</code></pre></div></div>
<p><img src="https://user-images.githubusercontent.com/86516594/234170701-11947ad0-5317-4d74-a966-1cf3e1671092.png" alt="image" /></p>

<p>위와 같은 이미지가 뜬다면 성공입니다. 
아까 설명한 <strong>OS의 ruby</strong>를 사용하고 있다는 말이에요!</p>

<h2 id="2️⃣-2단계">2️⃣ 2단계</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ruby <span class="nb">install</span> <span class="nt">-l</span> <span class="c">#설치가 가능한 ruby 버전을 확인해보기</span>
ruby <span class="nb">install </span>3.2.2 <span class="c"># 3.2.2 버전 설치하기</span>
rbenv global 3.2.2 <span class="c"># 3.2.2 버전으로 설정하기</span>
rbenv versions 
</code></pre></div></div>
<p><img width="320" alt="image" src="https://user-images.githubusercontent.com/86516594/234173522-003a0b86-b68b-425c-8f17-ed9d1dc4454e.png" /></p>

<p>위와 같은 이미지가 뜬다면 성공입니다.</p>

<h2 id="️필독️-에러-build-failed-macos-1301-using-ruby-build-20230330-대처">❗️필독❗️ 에러: BUILD FAILED (macOS 13.0.1 using ruby-build 20230330) 대처</h2>
<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ruby install 3.2.2</code>를 입력하고 설치하는 과정에서 <br /> <code class="language-plaintext highlighter-rouge">BUILD FAILED (macOS 13.0.1 using ruby-build 20230330)</code> 이라는 에러가 발생할 수 있어요.</p>
  </li>
  <li>이럴 때는 다음과 같이 터미널에 입력해 주세요.<br />
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>readline openssl
<span class="c"># 설치가 끝나면 차례대로 입력해 주세요</span>
brew <span class="nb">install </span>libyaml
</code></pre></div>    </div>
  </li>
  <li>오류가 발생하는 이유를 여러가지 의심해 볼 수 있어요
    <ul>
      <li><code class="language-plaintext highlighter-rouge">ruby-build</code>를 설치하는 과정에서 <code class="language-plaintext highlighter-rouge">homebrew</code>의 패키지인 <code class="language-plaintext highlighter-rouge">readline openssl</code>, <code class="language-plaintext highlighter-rouge">libyaml</code> 를 사용한다.</li>
      <li>brew를 처음하는 사용자는 위의 패키지가 설치되어 있지 않다.</li>
    </ul>
  </li>
</ul>

<p>✅ <strong>참고</strong>: <a href="https://github.com/rbenv/ruby-build/issues/1691">BUILD FAILED 에러 발생 이유</a></p>

<h2 id="3️⃣-3단계">3️⃣ 3단계</h2>
<ul>
  <li><a href="https://0530hwi.github.io/making%20blog/Making_GitBlog1/#에러-발생-zsh-command-not-found-brew">지난 번</a> homebrew 에러 발생과 마찬가지로 <code class="language-plaintext highlighter-rouge">vi ~/.zshrc</code>에 진입해 경로를 설정해줘야 해요.</li>
</ul>

<ol>
  <li><code class="language-plaintext highlighter-rouge">vi</code> 편집기 진입
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi ~/.zshrc
</code></pre></div>    </div>
  </li>
  <li>
    <p>알파벳 “i”를 눌러 <strong>insert</strong> 모드에 진입합니다.<br /> 모드가 바뀐 것은 터미널 하단에서 확인할 수 있어요.</p>
  </li>
  <li>다음 명령어를 그대로 추가해 줍니다.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[[</span> <span class="nt">-d</span> ~/.rbenv  <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
     <span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.rbenv/bin:</span><span class="nv">$PATH</span><span class="s2">"</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
     <span class="nb">eval</span> <span class="s2">"</span><span class="si">$(</span>rbenv init -<span class="si">)</span><span class="s2">"</span>
</code></pre></div>    </div>
  </li>
  <li>ESC를 누르고 <code class="language-plaintext highlighter-rouge">:wq</code>를 입력한 후에 빠져나오면 돼요
    <ul>
      <li>✅ <strong>참고</strong>: <code class="language-plaintext highlighter-rouge">:wq</code>는 저장 후 종료입니다. 이외에 <code class="language-plaintext highlighter-rouge">:q</code>는 종료, <code class="language-plaintext highlighter-rouge">:!q</code>는 강제 종료 등 여러 가지 명령어가 있어요</li>
    </ul>
  </li>
  <li>적용까지 해주기
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> ~/.zshrc
</code></pre></div>    </div>
    <p>터미널을 재실행해도 <code class="language-plaintext highlighter-rouge">system ruby</code>가 아닌 독립적인 <code class="language-plaintext highlighter-rouge">ruby 버전</code>을 적용합니다.</p>
  </li>
</ol>

<p>저는 <code class="language-plaintext highlighter-rouge">BUILD FAILED</code> 에러 해결해 보겠다고 4~5시간 구글링했는데, <br />여러분은 꼭 이 글을 통해 쉽게 해결했으면 좋겠습니다! 다음 파트에서 뵙겠습니다😅</p>]]></content><author><name>Byeong hwi</name></author><category term="Making Blog" /><category term="Blog" /><category term="Git" /><category term="Github" /><category term="Jekyll" /><category term="Brew" /><category term="Ruby" /><category term="rbenv" /><summary type="html"><![CDATA[깃허브 블로그 만들기, 정말 쉽게 정리했습니다. (에러 시 문제 해결 방법)]]></summary></entry><entry><title type="html">초보를 위한 깃허브 블로그 만들기(3). github.io 만들기</title><link href="http://localhost:4000/making%20blog/Making_GitBlog3/" rel="alternate" type="text/html" title="초보를 위한 깃허브 블로그 만들기(3). github.io 만들기" /><published>2023-04-25T00:00:00+09:00</published><updated>2023-04-25T00:00:00+09:00</updated><id>http://localhost:4000/making%20blog/Making_GitBlog3</id><content type="html" xml:base="http://localhost:4000/making%20blog/Making_GitBlog3/"><![CDATA[<p><br /></p>

<p>❗️모든 설치과정은 <strong>MacOS Ventura(M1 Mac)</strong> 환경에서 진행됩니다 ❗️</p>

<p><br /></p>

<p><strong>정말 거의 다 왔어요! 이제는 본격적으로 git을 만져봅시다!</strong></p>

<h1 id="git-패키지-설치하기">git 패키지 설치하기</h1>
<ul>
  <li>우리는 앞서 Homebrew를 설치했기 때문에<br />정말 간단하게 MacOS에 <code class="language-plaintext highlighter-rouge">git</code>을 설치할 수 있어요.</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>git

git <span class="nt">-v</span> <span class="c"># 설치된 버전 확인하기</span>
</code></pre></div></div>
<p><br /><br /><br /></p>
<h1 id="github-블로그-만들기">Github 블로그 만들기</h1>
<p>자, 이제 본격적으로 블로그를 만들어 봐요!</p>

<h2 id="1️⃣-1단계-저장소-만들기">1️⃣ 1단계: 저장소 만들기</h2>
<ol>
  <li>새로운 저장소를 만들어야 해요!
<img width="600" alt="스크린샷 2023-04-25 오후 2 35 47" src="https://user-images.githubusercontent.com/131740570/234184696-2fc079e5-69db-4e01-b47d-76bad4d4466e.png" class="align-center" />
    <ul>
      <li>Repositories로 이동 후에 New를 눌러주세요!<br /></li>
    </ul>
  </li>
  <li>Repository name과 Add a README file을 설정해 주세요!
<img width="600" alt="스크린샷 2023-04-25 오후 2 39 35" src="https://user-images.githubusercontent.com/131740570/234185028-a0c3e56f-ab16-4f3f-ae65-ea874892a145.png" class="align-center" /></li>
</ol>

<h2 id="2️⃣-2단계-로컬에-clone하기">2️⃣ 2단계: 로컬에 clone하기</h2>

<ul>
  <li>❓ ‘로컬에 clone 하기가 뭐야’라고 생각할 수 있어요
    <ul>
      <li>사용자 컴퓨터에 깃허브 저장소를 가지고 오는 의미랍니다.</li>
    </ul>
  </li>
</ul>

<ol>
  <li>
    <p>저장소로 이동 후에 저장소 링크를 복사해 줄게요
<img width="600" alt="스크린샷 2023-04-25 오후 2 49 28" src="https://user-images.githubusercontent.com/131740570/234185785-d6d1c198-4d25-412e-8615-3c4acb711385.png" class="align-center" /></p>
  </li>
  <li>다음 바탕화면에 폴더를 하나 만들어 줄게요
    <ul>
      <li>저는 <code class="language-plaintext highlighter-rouge">github_blog</code>라고 만들었습니다.</li>
    </ul>
  </li>
  <li>터미널로 이동할게요. 코드 참고해 주세요!
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>Desktop/github_blog <span class="c">#github_blog 폴더로 이동하기.</span>
git clone 아까 복사했던 주소 <span class="c">#</span>
</code></pre></div>    </div>
    <ul>
      <li>✅ <strong>참고</strong>: <code class="language-plaintext highlighter-rouge">cd desktop</code>을 하는 이유는 MacOS 바탕화면의 경로이기 때문이에요.</li>
    </ul>
  </li>
</ol>

<h2 id="3️⃣-3단계-minimal-mistakes-가져오기">3️⃣ 3단계: minimal-mistakes 가져오기</h2>
<ol>
  <li>
    <p><a href="https://github.com/mmistakes/minimal-mistakes">minimal-mistakes</a>로 이동합니다!</p>
  </li>
  <li>경로 이동하기<br />
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>desktop
<span class="nb">cd </span>github_blog
<span class="nb">cd </span>testerHWI.github.io <span class="c"># clone한 경로로 이동해야 해요!</span>
</code></pre></div>    </div>
  </li>
  <li>minimal-mistakes clone 하기<br />
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/mmistakes/minimal-mistakes.git
</code></pre></div>    </div>
  </li>
  <li>클론이 완료되면 폴더 옮겨주기
<img width="600" alt="스크린샷 2023-04-25 오후 5 09 57" src="https://user-images.githubusercontent.com/131740570/234222143-db721a77-e04c-47c3-a106-adefa455ac70.png" class="align-center" /></li>
</ol>

<ul>
  <li>저 같은 경우 모든 파일을 <strong>command + a</strong>로 전채 선택 후에, <strong>option + command + x</strong>로 옮겨줍니다!
    <ul>
      <li>윈도우에서 <strong>잘라내기</strong>라고 생각하면 편해요!</li>
    </ul>
  </li>
</ul>

<h2 id="4️⃣-4단계-로컬-서버-열어보기">4️⃣ 4단계: 로컬 서버 열어보기!</h2>
<p>✅ <strong>참고</strong>: 현재 경로는 <code class="language-plaintext highlighter-rouge">testerHWI.github.io</code> 입니다!</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">install
</span>gem <span class="nb">install </span>jekyll bundler

<span class="c"># you don't have to write permission 에러가 난다면 다음 코드를 입력해주세요</span>
<span class="nb">source</span> ~/.zshrc
gem <span class="nb">install </span>jekyll bundler <span class="c"># 에러 시에 다시 입력하는 거예요!</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 다음 코드는 로컬에서 작업한 파일을 깃에 푸시 하는 과정이에요!</span>
<span class="c"># 로컬 -&gt; 깃허브로 파일을 옮기는 작업입니다.</span>
git add <span class="k">*</span> 
git commit <span class="nt">-m</span> <span class="s2">"Making Blog"</span> <span class="c"># 커밋 메시지 작성</span>
git push origin main 
<span class="c"># 이 과정에서 아이디랑 비밀번호를 입력해야 해요.</span>
<span class="c"># !중요! 챕터를 참고해 주세요.</span>
</code></pre></div></div>

<p>이제 마지막 단계입니다!</p>

<p><code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code>로 서버를 열어줍니다!<br />
✅ <strong>참고</strong>: 위의 코드를 입력 후에 <code class="language-plaintext highlighter-rouge">.jekyll-cache</code>, <code class="language-plaintext highlighter-rouge">Gemfile.lock</code>파일이 생성이 되어야 합니다.</p>

<p>이제 터미널에 표시된 <strong>Server Address</strong>를 인터넷 주소창에 입력해 보세요! <br />
여러분의 멋진 블로그가 만들어졌을 거예요!😄<br /><br /></p>

<hr />
<h1 id="️중요️-비밀번호에-토큰을-입력해야-해요">❗️중요❗️: 비밀번호에 토큰을 입력해야 해요</h1>
<ul>
  <li><code class="language-plaintext highlighter-rouge">clone</code>, <code class="language-plaintext highlighter-rouge">push</code> 등 처음 작업하시는 분들은 토큰을 발급받아야 합니다.
    <h2 id="토큰-발급받기">토큰 발급받기</h2>
  </li>
</ul>

<ol>
  <li>
    <p>setting 누르기
<img width="248" height="350" alt="스크린샷 2023-04-25 오후 3 43 04" src="https://user-images.githubusercontent.com/131740570/234195172-ee3a83b3-e79e-45dc-b23e-90f51e86e4ff.png" class="align-center" /></p>
  </li>
  <li>
    <p><strong>가장 아래에 있는</strong> Developer setting을 눌러주세요
<img width="248" alt="스크린샷 2023-04-25 오후 3 45 18" src="https://user-images.githubusercontent.com/131740570/234195758-a93ea1c1-bf5f-4c33-9a42-379b1e8a0fd5.png" class="align-center" /></p>
  </li>
  <li>
    <p>Tokens -&gt; Generate new token을 눌러 주세요!
<img width="600" alt="스크린샷 2023-04-25 오후 4 26 14" src="https://user-images.githubusercontent.com/131740570/234204784-64adbed5-396a-47e1-a3f3-1744d0bd5f5f.png" class="align-center" /></p>
  </li>
  <li>
    <p>Note와,Expiration(만료 기간), Select scopes를 선택해 주세요!
<img width="600" alt="스크린샷 2023-04-25 오후 4 28 30" src="https://user-images.githubusercontent.com/131740570/234205304-f59e0250-96a7-4eb7-9198-09c04787ab24.png" class="align-center" /></p>

    <p>저 같은 경우, git push, clone 등의 작업만 하기 위해 <code class="language-plaintext highlighter-rouge">repo</code>만 선택했어요!<br />
 하단에 Generate token을 눌러 주세요</p>
  </li>
  <li>
    <p>토큰을 복사해 안전한 곳에 백업해놓으면 끝!
<img width="600" alt="스크린샷 2023-04-25 오후 4 31 10" src="https://user-images.githubusercontent.com/131740570/234205978-8c822f8e-3088-4084-8df1-019b4cfcf58a.png" class="align-center" /></p>
  </li>
</ol>

<ul>
  <li><strong>앞으로 터미널에 깃 작업 관련 비밀번호를 입력할 때는 토큰을 입력하면 됩니다.</strong></li>
</ul>]]></content><author><name>Byeong hwi</name></author><category term="Making Blog" /><category term="Blog" /><category term="Git" /><category term="Github" /><category term="Jekyll" /><category term="Brew" /><category term="Ruby" /><category term="rbenv" /><summary type="html"><![CDATA[깃허브 블로그 만들기, 정말 쉽게 정리했습니다. (에러 시 문제 해결 방법)]]></summary></entry><entry><title type="html">초보를 위한 깃허브 블로그 만들기(1). Homebrew 설치</title><link href="http://localhost:4000/making%20blog/Making_GitBlog1/" rel="alternate" type="text/html" title="초보를 위한 깃허브 블로그 만들기(1). Homebrew 설치" /><published>2023-04-23T00:00:00+09:00</published><updated>2023-04-23T00:00:00+09:00</updated><id>http://localhost:4000/making%20blog/Making_GitBlog1</id><content type="html" xml:base="http://localhost:4000/making%20blog/Making_GitBlog1/"><![CDATA[<p><br /></p>

<p>❗️모든 설치과정은 <strong>MacOS Ventura(M1 Mac)</strong> 환경에서 진행됩니다 ❗️</p>

<p><br /></p>

<h1 id="homebrew-설치하기">HomeBrew 설치하기</h1>
<ul>
  <li>HomeBrew란?
    <ul>
      <li>HomeBrew는 MacOS의 패키지 관리자예요</li>
      <li>Apple, Linux에서 제공하지 않는 패키지를 관리할 수 있어요.</li>
    </ul>
  </li>
</ul>

<h2 id="1️⃣-1단계">1️⃣ 1단계</h2>
<p>자, 그럼 이제 설치해봅시다.</p>
<ul>
  <li><a href="https://brew.sh/index_ko">HomeBrew 바로가기</a> <br />
홈페이지의 안내에 따라 설치해도 되고, 터미널에 다음 명령어를 입력해도 돼요.</li>
</ul>

<p>✅ <strong>참고</strong>: 터미널은 <strong>Command + Spacebar</strong> 실행 후, Terminal 입력 후에 바로 실행할 수 있어요!</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/bash <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div>

<h2 id="2️⃣-2단계">2️⃣ 2단계</h2>
<p>설치가 완료되었다면, <code class="language-plaintext highlighter-rouge">brew help</code>, <code class="language-plaintext highlighter-rouge">brew -v</code> 같은 명령어를 통해 HomeBrew가 잘 작동되는지 확인해 봐요.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">brew help</code>를 입력했을 때 <br />
<img width="356" alt="스크린샷 2023-04-24 오후 8 30 41" src="https://user-images.githubusercontent.com/86516594/233985857-b61ebefc-9fb3-4c00-9cdc-52198d213c69.png" /></li>
</ul>

<p>정상적으로 작동됩니다!</p>

<p>자, 이제 터미널을 끄고 재실행해 봅시다.</p>

<p><br /></p>

<h1 id="에러-발생-zsh-command-not-found-brew">에러 발생 zsh: command not found: brew</h1>
<ul>
  <li>터미널을 재시작한 후 <code class="language-plaintext highlighter-rouge">brew help</code>를 입력했지만 다음과 같은 에러가 발생했습니다! <br />
<img width="208" alt="image" src="https://user-images.githubusercontent.com/86516594/233987600-5a7a3959-3e01-4242-ab7d-c7583e8c7e1b.png" /></li>
</ul>

<h2 id="1️⃣-해결-1단계">1️⃣ 해결 1단계</h2>
<p>이럴 때는 터미널에 다음과 같이 입력해 주면 돼요<br /></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">eval</span> <span class="si">$(</span>/opt/homebrew/bin/brew shellenv<span class="si">)</span>
</code></pre></div></div>
<p>✅ <strong>참고</strong>: <code class="language-plaintext highlighter-rouge">eval</code> 명령어는 “<code class="language-plaintext highlighter-rouge">$</code>뒤 경로에 대한 인자를 받아 현재 터미널에서 실행하라”라는 의미예요.</p>

<p>그런데, 터미널을 재시작할 때마다 저런 명령어를 입력하는 것은 너무 귀찮아요<br />
그래서 우리는 다음과 같은 작업을 해줘야 돼요.</p>

<h2 id="2️⃣-해결-2단계">2️⃣ 해결 2단계</h2>

<ol>
  <li><code class="language-plaintext highlighter-rouge">vi</code> 편집기 진입
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi ~/.zshrc
</code></pre></div>    </div>
    <p>✅ <strong>참고</strong>: <code class="language-plaintext highlighter-rouge">echo $SHELL</code>을 통해 현재 사용되는 편집기가 무엇인지 알아야 해요.
저는 <code class="language-plaintext highlighter-rouge">zsh</code>를 사용하고 있지만, <code class="language-plaintext highlighter-rouge">bash</code>의 경우에는 <code class="language-plaintext highlighter-rouge">vi ~/.bashrc</code>가 됩니다.</p>
  </li>
  <li>
    <p>알파벳 “i”를 눌러 <strong>insert</strong> 모드에 진입합니다.<br />
모드가 바뀐 것은 터미널 하단에서 확인할 수 있어요.</p>
  </li>
  <li>다음 명령어를 그대로 추가해 줍니다.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">eval</span> <span class="si">$(</span>/opt/homebrew/bin/brew shellenv<span class="si">)</span>
</code></pre></div>    </div>
    <p><img width="294" alt="image" src="https://user-images.githubusercontent.com/86516594/233991199-545d0b97-db40-4b17-8679-73c44afbc6e8.png" /></p>
  </li>
  <li>ESC를 누르고 <code class="language-plaintext highlighter-rouge">:wq</code>를 입력한 후에 빠져나오면 돼요
    <ul>
      <li>✅ <strong>참고</strong>: <code class="language-plaintext highlighter-rouge">:wq</code>는 저장 후 종료입니다. 이외에 <code class="language-plaintext highlighter-rouge">:q</code>는 종료, <code class="language-plaintext highlighter-rouge">:!q</code>는 강제 종료 등 여러 가지 명령어가 있어요</li>
    </ul>
  </li>
  <li>터미널을 재부팅 후 <code class="language-plaintext highlighter-rouge">brew help</code>를 입력하면 brew가 정상적으로 실행됩니다!</li>
</ol>

<h1 id="homebrew-삭제하기">Homebrew 삭제하기</h1>
<p>혹시라도 에러가 발생한다면, <strong>Homebrew</strong>를 삭제한 후 다시 설치하는 것을 권장합니다.</p>

<ol>
  <li>터미널에 입력해 주세요.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/bash <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/master/uninstall.sh<span class="si">)</span><span class="s2">"</span>
</code></pre></div>    </div>
    <p>입력 후에 <strong>Y</strong>를 입력해 삭제해 주세요!</p>
  </li>
  <li>다음 <code class="language-plaintext highlighter-rouge">/usr/local</code> 폴더에서 HomeBrew 폴더를 삭제해 줍니다.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm</span> <span class="nt">-rf</span> Homebrew/
</code></pre></div>    </div>
  </li>
</ol>

<p>Homebrew를 설치했다면 절반은 성공입니다. 다음 파트에서 뵙겠습니다😄</p>]]></content><author><name>Byeong hwi</name></author><category term="Making Blog" /><category term="Blog" /><category term="Git" /><category term="Github" /><category term="Jekyll" /><category term="Brew" /><category term="Ruby" /><category term="rbenv" /><summary type="html"><![CDATA[깃허브 블로그 만들기, 정말 쉽게 정리했습니다. (에러 시 문제 해결 방법)]]></summary></entry></feed>